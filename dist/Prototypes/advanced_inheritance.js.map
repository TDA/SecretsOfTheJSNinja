{"version":3,"sources":["../../Prototypes/advanced_inheritance.js"],"names":[],"mappings":";;AAAA,IAAI,MAAM,QAAQ,QAAR,CAAV;;;;;AAKA,CAAC,YAAY;;AAEX,MAAI,eAAe,KAAnB;AACA,MAAI,eAAe,YAAnB;;AAEA,WAAS,UAAT,CAAoB,EAApB,EAAwB;AACtB,WAAO,OAAO,EAAP,KAAc,UAArB;AACD;;AAED,WAAS,kBAAT,CAA4B,EAA5B,EAAgC;AAC9B,WAAO,aAAa,IAAb,CAAkB,EAAlB,CAAP;AACD;;AAED,SAAO,QAAP,GAAkB,UAAU,YAAV,EAAwB;AACxC,QAAI,SAAS,KAAK,SAAlB;;AAEA,mBAAe,IAAf;AACA,QAAI,YAAY,IAAI,IAAJ,EAAhB;AACA,mBAAe,KAAf;;;AAGA,SAAK,IAAI,UAAT,IAAuB,YAAvB,EAAqC;;AAEnC,UAAI,WAAW,aAAa,UAAb,CAAX,KAAwC,WAAW,OAAO,UAAP,CAAX,CAAxC,IAA0E,mBAAmB,aAAa,UAAb,CAAnB,CAA9E,EAA4H;;;;;;AAM1H,SAAC,UAAU,IAAV,EAAgB,EAAhB,EAAoB;AACnB,iBAAO,YAAY;;AAEjB,gBAAI,MAAM,KAAK,MAAf;;;;AAIA,oBAAQ,GAAR,CAAY,OAAZ,EAAqB,IAArB;AACA,iBAAK,MAAL,GAAc,OAAO,IAAP,CAAd;;AAEA,gBAAI,gBAAgB,GAAG,KAAH,CAAS,IAAT,EAAe,SAAf,CAApB;;;AAGA,iBAAK,MAAL,GAAc,GAAd;;AAEA,mBAAO,aAAP;AACD,WAfD;AAgBD,SAjBD,EAiBG,UAjBH,EAiBe,aAAa,UAAb,CAjBf;AAkBD,OAxBD,MAwBO;;AAEL,kBAAU,UAAV,IAAwB,aAAa,UAAb,CAAxB;AACD;AACF;;;AAGD,aAAS,KAAT,GAAiB;AACf,UAAI,CAAC,YAAD,IAAiB,KAAK,IAA1B,EAAgC;AAC9B,aAAK,IAAL,CAAU,KAAV,CAAgB,IAAhB,EAAsB,SAAtB;AACD;AACF;;AAED,UAAM,SAAN,GAAkB,SAAlB;AACA,UAAM,WAAN,GAAoB,KAApB;AACA,UAAM,QAAN,GAAiB,OAAO,QAAxB;;AAEA,WAAO,KAAP;AACD,GApDD;AAqDD,CAlED;;;AAqEA,IAAI,SAAS,OAAO,QAAP,CAAgB;AAC3B,QAAM,cAAS,SAAT,EAAoB;AACxB,SAAK,OAAL,GAAe,SAAf;AACD,GAH0B;AAI3B,SAAO,iBAAW;AAChB,WAAO,KAAK,OAAZ;AACD;AAN0B,CAAhB,CAAb;;AASA,IAAI,QAAQ,OAAO,QAAP,CAAgB;AAC1B,QAAM,gBAAW;AACf,SAAK,MAAL,CAAY,KAAZ;AACD,GAHyB;AAI1B,SAAO,iBAAW;;AAEhB,WAAO,KAAK,MAAL,EAAP;AACD,GAPyB;AAQ1B,cAAY,sBAAW;AACrB,WAAO,IAAP;AACD;AAVyB,CAAhB,CAAZ;;;AAcA,IAAI,SAAS,IAAI,MAAJ,CAAW,IAAX,CAAb;AACA,IAAI,iBAAJ,CAAsB,OAAO,KAAP,EAAtB,EAAsC,wBAAtC;AACA,IAAI,QAAQ,IAAI,KAAJ,EAAZ;AACA,IAAI,iBAAJ,CAAsB,MAAM,UAAN,EAAtB,EAA0C,wBAA1C;AACA,IAAI,iBAAJ,CAAsB,CAAC,MAAM,KAAN,EAAvB,EAAsC,2BAAtC;AACA,IAAI,iBAAJ,CAAsB,kBAAkB,MAAxC,EAAgD,qBAAhD;AACA,IAAI,iBAAJ,CAAsB,iBAAiB,KAAjB,IAA0B,iBAAiB,MAAjE,EAAyE,gCAAzE","file":"advanced_inheritance.js","sourcesContent":["var lib = require('../lib');\n\n// Let's simulate traditional inheritance with JS using prototypes\n// This will allow us to mimic something very close to React.createClass({x: y}); syntax.\n\n(function () {\n\n  var initializing = false;\n  var superPattern = /\\b_super\\b/;\n  \n  function isFunction(fn) {\n    return typeof fn === 'function';\n  }\n\n  function functionCallsSuper(fn) {\n    return superPattern.test(fn);\n  }\n\n  Object.subClass = function (classMembers) {\n    var _super = this.prototype;\n\n    initializing = true;\n    var prototype = new this();\n    initializing = false;\n\n    // Copy all members\n    for (var memberName in classMembers) {\n      // check if this is a function that makes a call to a `_super()`\n      if (isFunction(classMembers[memberName]) && isFunction(_super[memberName]) && functionCallsSuper(classMembers[memberName])) {\n        // we need special handling here, this calls super, so we need to\n        // a. give the ability to call `_super` from within the subclass (expose it)\n        // b. execute the subclass method\n        // Pretty much simulating `super` keyword in other languages (and ES6+) :)\n        // We need to return a new wrapped function that does a & b.\n        (function (name, fn) {\n          return function () {\n            // store a reference to _super so we can restore it later\n            var tmp = this._super;\n\n            // set the new super method to be the method that exists in the superclass prototype\n            // Note that `this` is the instance here, since new function scope\n            console.log('this?', this);\n            this._super = _super[name];\n            // Set context to this instance and execute the method\n            var returnedValue = fn.apply(this, arguments);\n\n            // Restore the _super method\n            this._super = tmp;\n\n            return returnedValue;\n          };\n        })(memberName, classMembers[memberName]);\n      } else {\n        // Just copy the member\n        prototype[memberName] = classMembers[memberName];\n      }\n    }\n\n    // Now allow this to have subclassing ability as well, add its prototype etc.\n    function Class() {\n      if (!initializing && this.init) {\n        this.init.apply(this, arguments);\n      }\n    }\n\n    Class.prototype = prototype;\n    Class.constructor = Class;\n    Class.subClass = Object.subClass;\n\n    return Class;\n  };\n})();\n\n// e.g. here will be uncommented once we finish writing the basic structure\nvar Person = Object.subClass({\n  init: function(isDancing) {\n    this.dancing = isDancing;\n  },\n  dance: function() {\n    return this.dancing;\n  }\n});\n\nvar Ninja = Person.subClass({\n  init: function() {\n    this._super(false);\n  },\n  dance: function() {\n    // Ninja-specific stuff here\n    return this._super();\n  },\n  swingSword: function() {\n    return true;\n  }\n});\n\n// All of these should pass for us when our code is done\nvar person = new Person(true);\nlib.assertCommandLine(person.dance(), \"The person is dancing.\");\nvar ninja = new Ninja();\nlib.assertCommandLine(ninja.swingSword(), \"The sword is swinging.\");\nlib.assertCommandLine(!ninja.dance(), \"The ninja is not dancing.\");\nlib.assertCommandLine(person instanceof Person, \"Person is a Person.\");\nlib.assertCommandLine(ninja instanceof Ninja && ninja instanceof Person, \"Ninja is a Ninja and a Person.\");\n\n"]}