{"version":3,"sources":["../../Prototypes/advanced_inheritance.js"],"names":[],"mappings":";;AAAA,IAAI,MAAM,QAAQ,QAAR,CAAV","file":"advanced_inheritance.js","sourcesContent":["var lib = require('../lib');\n\n// Let's simulate traditional inheritance with JS using prototypes\n// This will allow us to mimic something very close to React.createClass({x: y}); syntax.\n\n// e.g. here will be uncommented once we finish writing the basic struture\n// var Person = Object.subClass({\n//   init: function(isDancing) {\n//     this.dancing = isDancing;\n//   },\n//   dance: function() {\n//     return this.dancing;\n//   }\n// });\n\n// var Ninja = Person.subClass({\n//   init: function() {\n//     this._super(false);\n//   },\n//   dance: function() {\n//     // Ninja-specific stuff here\n//     return this._super();\n//   },\n//   swingSword: function() {\n//     return true;\n//   }\n// });\n\n\n// All of these should pass for us when our code is done\n// var person = new Person(true);\n// lib.assertCommandLine(person.dance(), \"The person is dancing.\");\n// var ninja = new Ninja();\n// lib.assertCommandLine(ninja.swingSword(), \"The sword is swinging.\");\n// lib.assertCommandLine(!ninja.dance(), \"The ninja is not dancing.\");\n// lib.assertCommandLine(person instanceof Person, \"Person is a Person.\");\n// lib.assertCommandLine(ninja instanceof Ninja && ninja instanceof Person, \"Ninja is a Ninja and a Person.\");"]}