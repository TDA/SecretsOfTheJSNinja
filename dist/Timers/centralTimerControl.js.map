{"version":3,"sources":["../../Timers/centralTimerControl.js"],"names":[],"mappings":";;AAAA,IAAI,eAAe;AACjB,WAAS,CADQ;AAEjB,kBAAgB,EAFC;;AAIjB,OAAK,aAAS,EAAT,EAAa;AAChB,SAAK,cAAL,CAAoB,IAApB,CAAyB,EAAzB;AACD,GANgB;;AAQjB,qBAAmB,6BAAY;;AAE7B,QAAI,KAAK,OAAT,EAAkB;;AAElB,KAAC,SAAS,YAAT,GAAwB;AACvB,WAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,aAAa,cAAb,CAA4B,MAAhD,EAAwD,GAAxD,EAA6D;;;AAG3D,YAAI,aAAa,cAAb,CAA4B,CAA5B,QAAqC,KAAzC,EAAgD;;AAE9C,uBAAa,cAAb,CAA4B,MAA5B,CAAmC,CAAnC,EAAsC,CAAtC;AACA;AACD;AACF;AACD,mBAAa,OAAb,GAAuB,WAAW,YAAX,EAAyB,CAAzB,CAAvB;AACD,KAXD;AAYD,GAxBgB;;AA0BjB,oBAAkB,4BAAY;AAC5B,iBAAa,KAAK,OAAlB;AACA,SAAK,OAAL,GAAe,CAAf;AACD;AA7BgB,CAAnB","file":"centralTimerControl.js","sourcesContent":["var centralTimer = {\n  timerID: 0,\n  timerCallbacks: [],\n\n  add: function(fn) {\n    this.timerCallbacks.push(fn);\n  },\n\n  startCentralTimer: function () {\n    // if there is an existing central timer, don't start a new one\n    if (this.timerID) return;\n\n    (function runNextTimer() {\n      for (let i = 0; i < centralTimer.timerCallbacks.length; i++) {\n        // execute each callback, and remove it if it returns false, else\n        // continue executing it at the next available block\n        if (centralTimer.timerCallbacks[i]() === false) {\n          // remove\n          centralTimer.timerCallbacks.splice(i, 1);\n          i--;\n        }\n      }\n      centralTimer.timerID = setTimeout(runNextTimer, 0);\n    })();\n  },\n\n  stopCentralTimer: function () {\n    clearTimeout(this.timerID);\n    this.timerID = 0;\n  }\n};\n"]}