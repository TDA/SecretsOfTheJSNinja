{"version":3,"sources":["../../Timers/centralTimerControl.js"],"names":[],"mappings":";;AAAA,IAAI,eAAe;AACjB,WAAS,CADQ;AAEjB,kBAAgB,EAFC;;AAIjB,oBAAkB,0BAAS,EAAT,EAAa;AAC7B,SAAK,cAAL,CAAoB,IAApB,CAAyB,EAAzB;AACD,GANgB;;AAQjB,SAAO,iBAAY;;AAEjB,QAAI,KAAK,OAAT,EAAkB;;AAElB,KAAC,SAAS,YAAT,GAAwB;AACvB;;AAEA,WAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,aAAa,cAAb,CAA4B,MAAhD,EAAwD,GAAxD,EAA6D;;;AAG3D,YAAI,aAAa,cAAb,CAA4B,CAA5B,QAAqC,KAAzC,EAAgD;;AAE9C,uBAAa,cAAb,CAA4B,MAA5B,CAAmC,CAAnC,EAAsC,CAAtC;AACA;AACD;AACF;;AAED,UAAG,aAAa,cAAb,CAA4B,MAA5B,KAAuC,CAA1C,EAA6C;;AAE7C,mBAAa,OAAb,GAAuB,WAAW,YAAX,EAAyB,CAAzB,CAAvB;AACD,KAhBD;AAiBD,GA7BgB;;AA+BjB,QAAM,gBAAY;AAChB,iBAAa,KAAK,OAAlB;AACA,SAAK,OAAL,GAAe,CAAf;AACD;AAlCgB,CAAnB;;;;;AAyCA,IAAI,IAAI,CAAR;AACA,aAAa,gBAAb,CAA8B,YAAY;AACxC,UAAQ,GAAR,CAAY,IAAI,MAAhB;AACA,MAAI,OAAO,CAAX,EAAc,OAAO,KAAP;AACf,CAHD;;AAKA,aAAa,gBAAb,CAA8B,YAAY;AACxC,UAAQ,GAAR,CAAY,IAAI,MAAhB;AACA,MAAI,OAAO,EAAX,EAAe,OAAO,KAAP;AAChB,CAHD;;AAKA,aAAa,gBAAb,CAA8B,YAAY;AACxC,UAAQ,GAAR,CAAY,IAAI,YAAhB;AACA,MAAI,OAAO,EAAX,EAAe,OAAO,KAAP;AAChB,CAHD;;AAKA,aAAa,KAAb;;AAEA,aAAa,gBAAb,CAA8B,YAAY;AACxC,UAAQ,GAAR,CAAY,IAAI,QAAhB;AACA,MAAI,OAAO,EAAX,EAAe,OAAO,KAAP;AAChB,CAHD","file":"centralTimerControl.js","sourcesContent":["var centralTimer = {\n  timerID: 0,\n  timerCallbacks: [],\n\n  addTimerCallback: function(fn) {\n    this.timerCallbacks.push(fn);\n  },\n\n  start: function () {\n    // if there is an existing central timer, don't start a new one\n    if (this.timerID) return;\n\n    (function runNextTimer() {\n      'use strict';\n\n      for (let i = 0; i < centralTimer.timerCallbacks.length; i++) {\n        // execute each callback, and remove it if it returns false, else\n        // continue executing it at the next available block - `tick` :D\n        if (centralTimer.timerCallbacks[i]() === false) {\n          // remove\n          centralTimer.timerCallbacks.splice(i, 1);\n          i--;\n        }\n      }\n      // for the sole reason that the setTimeout will trigger even if there are no callbacks left.\n      if(centralTimer.timerCallbacks.length === 0) return;\n\n      centralTimer.timerID = setTimeout(runNextTimer, 0);\n    })();\n  },\n\n  stop: function () {\n    clearTimeout(this.timerID);\n    this.timerID = 0;\n  }\n};\n\n\n// Notice the order here, this is wonderful, as we now have a way to control\n// when a timer executes because of our central timer thread, we specify the\n// order of the callbacks and control async behavior :D\nvar x = 0;\ncentralTimer.addTimerCallback(function () {\n  console.log(x + ' sai');\n  if (x++ >= 5) return false;\n});\n\ncentralTimer.addTimerCallback(function () {\n  console.log(x + ' boy');\n  if (x++ >= 10) return false;\n});\n\ncentralTimer.addTimerCallback(function () {\n  console.log(x + ' kathrikai');\n  if (x++ >= 15) return false;\n});\n\ncentralTimer.start();\n\ncentralTimer.addTimerCallback(function () {\n  console.log(x + ' well?');\n  if (x++ >= 20) return false;\n});"]}